---
title: "Simulate DID Data"
editor: visual
editor_options: 
  chunk_output_type: console
freeze: true
---

```{r}
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(directlabels)
library(ggthemes)
library(fastDummies)
library(lfe)
library(did)
library(glue)
library(furrr)
library(patchwork)
library(progressr)
library(repr)
library(DT)
library(knitr)
library(gt)
library(here)
library(ggsci)
library(fixest)
library(RStata)
options("RStata.StataPath" = "/Applications/Stata/StataSE.app/Contents/MacOS/stata-se")
options("RStata.StataVersion" = 16)
    

options(dplyr.summarise.inform = FALSE)

theme_tufte_grid <- function(base_size = 16, base_family = "Gill Sans", ticks = TRUE) {
  
  ret <- ggplot2::theme_bw(base_family = base_family, base_size = base_size) +
    ggplot2::theme(
      axis.line = ggplot2::element_blank(),
      axis.ticks = ggplot2::element_blank(),
      axis.title.x = ggplot2::element_text(vjust = -0.3),
      axis.title.y = ggplot2::element_text(vjust = 0.8),
      legend.background = ggplot2::element_blank(),
      legend.key = ggplot2::element_blank(),
      legend.title = ggplot2::element_text(face="plain"),
      panel.background = ggplot2::element_blank(),
      panel.border = ggplot2::element_blank(),
      panel.grid = ggplot2::element_blank(),
      plot.background = ggplot2::element_blank(),
      strip.background = ggplot2::element_blank()
    )
  
  if (!ticks) {
    ret <- ret + ggplot2::theme(axis.ticks = ggplot2::element_blank())
  }
  
  ret
}
invthm <- theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "transparent", colour = NA), 
    plot.background = element_rect(fill = "transparent", colour = NA),
    legend.background = element_rect(fill = "transparent", colour = NA),
    legend.key = element_rect(fill = "transparent", colour = NA),
    text = element_text(colour = "black"),
    axis.text = element_text(colour = "black"),
    legend.position = 'none',
    legend.title = element_blank(),
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360)
  )
```

```{r}
#| echo: false
#| message: false
#| warning: false


params_2x2 <- list(
  mu = list("1998" = 2),
  mu_t = list("1998" = 0),
  tx = list("1998" = 1:25,
            "NA" = 26:50),
  bin = c(-5,5)
)


params_4x4 =  list(
  mu = list("1989" = 5,
            "1990" = 3,
            "1991" = 1),
  mu_t = list("1989" = 0,
              "1990" = 0,
              "1991" = 0),
  tx = list("1989" = 1:17,
            "1990" = 18:35,
            "1991" = 35:50),
  bin = c(-5,5))


# Case 1:  One Treatment Period, Constant Treatment Effects

params1 <- list(
  mu = list("1998" = 2),
  mu_t = list("1998" = 0),
  tx = list("1998" = 1:25,
            "NA" = 26:50),
  bin = c(-5,5)
)

# Case 2: One Treatment Period, Dynamic Treatment Effects
params2=  list(
  mu = list("1998" = 0),
  mu_t = list("1998" = 0.3),
  tx = list("1998" = 1:25,
            "NA" = 26:50),
  bin = c(-5,5))

# Case 3: Multiple Treatment Periods and Constant Equal Treatment Effects
params3=  list(
  mu = list("1989" = 3,
            "1998" = 3,
            "2007" = 3),
  mu_t = list("1989" = 0,
              "1998" = 0,
              "2007" = 0),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "2007" = 36:50),
  bin = c(-5,5))


# Case 4: Multiple Treatment Periods and Constant Different Treatment Effects

params4 =  list(
  mu = list("1989" = 5,
            "1998" = 3,
            "2007" = 1),
  mu_t = list("1989" = 0,
              "1998" = 0,
              "2007" = 0),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "2007" = 35:50),
  bin = c(-5,5))

params4b =  list(
  mu = list("1989" = 5,
            "1998" = 3),
  mu_t = list("1989" = 0,
              "1998" = 0),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "NA" = 35:50),
  bin = c(-5,5))

# Case 5: Multiple Treatment Periods and Constant Dynamic Treatment Effects
# Same as Sant'Anna Case 1 (all units being eventually treated and homogeneous treatment effect dynamics)
params5=  list(
  mu = list("1989" = 0,
            "1998" = 0,
            "2007" = 0),
  mu_t = list("1989" = 0.3,
              "1998" = 0.3,
              "2007" = 0.3),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "2007" = 35:50),
  bin = c(-5,5))

# Sant'Anna Case 2: One group never treated
params5b=  list(
  mu = list("1989" = 0,
            "1998" = 0),
  mu_t = list("1989" = 0.3,
              "1998" = 0.3),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "NA" = 35:50),
  bin = c(-5,5))

# Sant'Anna Case 2: One group never treated, but use all leads and lags
params5c=  list(
  mu = list("1989" = 0,
            "1998" = 0),
  mu_t = list("1989" = 0.3,
              "1998" = 0.3),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "NA" = 35:50),
  bin = c(-100,100))


# Case 6: Multiple Treatment Periods and Heterogeneous Dynamic Treatment Effects

params6=  list(
  mu = list("1989" = 0,
            "1998" = 0,
            "2007" = 0),
  mu_t = list("1989" = 0.5,
              "1998" = 0.3,
              "2007" = 0.1),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "2007" = 35:50),
  bin = c(-5,5))


params6b=  list(
  mu = list("1989" = 0,
            "1998" = 0),
  mu_t = list("1989" = 0.5,
              "1998" = 0.3),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "NA" = 35:50),
  bin = c(-5,5))

make_data <- function(params, N = 1000, start = 1980, stop = 2015) {
  mu <- params$mu
  mu_t <- params$mu_t
  tx = params$tx
  bin <- params$bin

  # year fixed effects
  year <- tibble(
    year = start:stop,
    year_fe = rnorm(length(start:stop), 0, 0.5))

  df_truth_ <-suppressWarnings({
    map(tx,~(.x %>% data.frame())) %>%
      bind_rows(.id = "tx") %>%
      set_names(c("group","state")) %>%
      as_tibble() %>%
      suppressMessages(mutate(group = as.numeric(paste0(group)))) %>%
      left_join(
        map(mu,~(.x %>% data.frame())) %>%
          bind_rows(.id = "tx") %>%
          set_names(c("group","mu")) %>%
          inner_join(
            map(mu_t,~(.x %>% data.frame())) %>%
              bind_rows(.id = "tx") %>%
              set_names(c("group","mu_t")),"group"
          ), c("group")
      ) %>%
      mutate(group = ifelse(!is.na(group),as.numeric(paste0(group)),NA))
  })

  # For dynamic treatment effects
  df_truth_t <-
    crossing(state = unique(df_truth_$state), year = unique(year$year)) %>%
    left_join(df_truth_,"state") %>%
    mutate(rel_time = pmax(year-group)) %>%
    mutate(tau = ifelse(!is.na(mu) & rel_time>=0,mu,0),
           tau_t = ifelse(!is.na(mu_t) &rel_time>=0,mu_t,0)) %>%
    group_by(group, state) %>%
    mutate(cumtau = tau + cumsum(tau_t))   %>%
    group_by(rel_time) %>%
    summarise(mu_truth = mean(cumtau)) %>% na.omit()



  df_truth <-
    crossing(state = unique(df_truth_$state), year = unique(year$year)) %>%
    left_join(df_truth_,"state") %>%
    mutate(rel_time = pmax(year-group)) %>%
    mutate(tau = ifelse(!is.na(mu) & rel_time>=0,mu,0),
           tau_t = ifelse(!is.na(mu_t) &rel_time>=0,mu_t,0)) %>%
    group_by(group, state) %>%
    mutate(cumtau = tau + cumsum(tau_t)) %>%
    mutate(max_time_post = max(year-group)) %>%
    ungroup() %>%
    mutate(max_time_post = min(max_time_post,na.rm=TRUE)) %>%
    #filter(rel_time <= max_time_post) %>%
    filter(cumtau>0) %>% group_by(group) %>% summarise(mean = mean(cumtau)) %>%
    as_tibble() %>%
    left_join(
      tx %>% map_dbl(~(length(.x))) %>% data.frame() %>% rownames_to_column(var = "group") %>% set_names(c("group","weight")) %>%
        filter(group != "NA") %>%
        mutate(total_weight = sum(weight)) %>%
        mutate(group = as.numeric(paste0(group))),
      "group") %>%
    mutate(mu_truth = mean*weight/total_weight) %>%
    summarise(mu_truth = sum(mu_truth)) %>%
    mutate(rel_time = NA) %>%
    mutate(type = "Static")  %>%
    bind_rows(
      df_truth_t %>%
        mutate(type = "Dynamic")
    )

  # Units
  unit <- tibble(
    unit = 1:N,
    unit_fe = rnorm(N, 0, 0.5),
    # generate state
    state = sample(rep(1:50, N/50), N, replace = FALSE)) %>%
    left_join(
      df_truth_,c("state")
    ) %>%
    mutate(evertreated = ifelse(is.na(as.numeric(group)),"C","T")) %>%
    mutate(hat_gamma = mu) %>%
    mutate(hat_gamma_t = mu_t) %>%
    # generate unit specific yearly treatment effects
    rowwise() %>%
    mutate(gamma = rnorm(1, hat_gamma, .2)) %>%
    mutate(gamma_t = ifelse(mu_t!=0,rnorm(1,hat_gamma_t,0.2),0)) %>%
    ungroup()

  # full interaction of unit X year
  df <- crossing(unit, year) %>%
    # make error term and get treatment indicators and treatment effects
    mutate(error = rnorm(nrow(.), 0, 0.5),
           treat = ifelse(year >= group & !is.na(group), 1, 0),
           tau = ifelse(treat == 1, gamma, 0),
           tau_t = ifelse(treat==1,gamma_t,0)) %>%
    # calculate the dep variable
    group_by(unit) %>%
    mutate(cumtau = tau + cumsum(tau_t)) %>%
    mutate(dep_var = unit_fe + year_fe + cumtau + error) %>%
    mutate(rel_year = year - as.numeric(group)) %>%
    mutate(rel_year = ifelse(rel_year == -Inf, NA, rel_year))%>%
    dummy_cols(select_columns = "rel_year") %>%
    mutate(across(starts_with("rel_year_"), ~replace_na(., 0))) %>%
    # generate pre and post dummies
    mutate(Pre = ifelse((rel_year < bin[1]) * (!is.na(rel_year)), 1, 0),
           Post = ifelse((rel_year > bin[2]) * (!is.na(rel_year)), 1, 0)) %>%
    mutate(bin1 = bin[1],
           bin2 = bin[2])

  out <- list(
    df = df,
    truth =   df_truth,
    truth_g = df_truth_,
    params = params
  )
}


plot_data <- function(df) {

  year_range <- range(df$df$year)
  
  staggered <- ifelse(length(unique(na.omit(df$df$group)))>1,"Staggered","Single Treatment Time")

  control <- ifelse("C" %in% unique(df$df$evertreated),TRUE,FALSE)

  if (control) {
    df_ <- df$df %>%
      mutate(group = ifelse(evertreated=="C","Never Treated",paste0(group)))
  } else {
    df_ <- df$df
  }
  unique_groups <- unique(df_$group)
  colors <- c("#A7473A","#4B5F6C","#51806a")[1:length(unique_groups)]
  names(colors) = unique(df_$group)

  df_vline <- suppressWarnings({
    data.frame(group = unique(df_$group),xintercept = unique(as.numeric(df_$group)) - 0.5) %>%
      mutate(color = colors[factor(group)])
  })

  suppressWarnings({
    df_ %>%
      ggplot(aes(x = year, y = dep_var)) +
      # unit specific lines
      geom_line(alpha = 1/10, color = "grey",aes(group = unit)) +
      # group specific averages
      geom_line(
        data = . %>%
          group_by(group, year) %>%
          summarize(dep_var = mean(dep_var)) ,
        aes(x = year, y = dep_var, group = factor(group),
            color = factor(group)), size = 1) +
      labs(x = "", y = "", color = "Group") +
      geom_vline(data = df_vline, aes(xintercept = xintercept, color = factor(group)),linetype="dashed",size=1) +
      ggsci::scale_color_aaas()+
      geom_dl(data =
                . %>%
                group_by(group, year) %>%
                summarize(dep_var = mean(dep_var)), method = "last.bumpup",aes(label = group)) +
      scale_y_continuous(limits = c(-3, 20)) +
      #labs(subtitle = expression(paste("Staggered + Dynamic/Unequal ", tau))) +
      theme_clean() + theme(plot.background = element_blank()) +
      theme(legend.position = 'none',
            legend.title = element_blank(),
            plot.title = element_text(hjust = 0.5),
            plot.subtitle = element_text(hjust = 0.5),
            axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360))+
      scale_x_continuous(limits = year_range)
  })
}

plot_tx_grid <- function(df) {
  df <- df$df
  year_range <- range(df$year)
  tvals <- unique(df$year)
  gvals <- unique(df$group)
  
  crossing(gvals,tvals)  %>% 
    mutate(treated = tvals>=gvals) %>% 
    spread(gvals,treated) %>% 
    janitor::clean_names() %>% 
    rename_at(vars(matches("na")), ~sub("na","nt",.)) %>% 
    gather(group,value,-tvals) %>% 
    ggplot() +
    geom_tile(aes(y=tvals,x=group, fill = value), colour = "black", size = 2) + 
    theme_tufte_grid() + 
    ggsci::scale_fill_aaas() +
    theme(legend.position="none") +
    scale_y_reverse() +
    labs(y = "Time" , x = "Group") +
    scale_x_discrete(position = "top") +
    theme(axis.text=element_text(size=12),
          axis.title=element_text(size=14,face="bold"))  + 
    scale_y_continuous(breaks = seq(year_range[1],year_range[2],1))
}
```

## Plot Data

```{r}
#| echo: false
#| warning: false
#| message: false
#| 
set.seed(12345)
df1 <- make_data(params1,N=1000) 
data1 <- df1$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor)

df3 <- make_data(params3,N=1000) 
data3 <- df3$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor)

df6 <- make_data(params6,N=1000) 
data6 <- df6$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor)
haven::write_dta(data6 %>% mutate_at(vars(treatment_time,year),function(x) as.numeric(paste0(x))), path = "~/Desktop/data6.dta")

df6b <- make_data(params6b,N=1000) 
data6b <- df6b$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor) %>% 
  mutate(treated =1)
haven::write_dta(data6b %>% mutate_at(vars(treatment_time,year),function(x) as.numeric(paste0(x))), path = "~/Desktop/data6b.dta")


df6 %>%  plot_data() + ylim(c(-2,6)) + scale_x_continuous(expand = expand_scale(mult = c(0,.25)))

df6b %>%  plot_data() + ylim(c(-2,6)) + scale_x_continuous(expand = expand_scale(mult = c(0,.25)))


```

## Extended TWFE Model

The problem I'm running into here is as follows. In a panel where there is a later treated unit (e.g., 2007) there should be no interactions with years at or above this. The problem is that when I run it this way, the constant term that is fit in Stata is not fit in R,so the coefficients are off. Only if I allow for these interactions will the coefficients be correct for the *first* treated groups, but not the latter.

Maybe see [here](https://www.statalist.org/forums/forum/general-stata-discussion/general/630290-interpreting-the-constant-in-reghdfe)?

### Debugging

### Structuring the data

-   Need to only make interactions between group (`treatment_time`) and time (`year`) where `year>treatment_time`

```{r}
#| echo: true
#| warning: false
#| message: false


# This data frame is structured to use not-yet-treated groups as controls.

df_etwfe6 <- 
  data6 %>% 
  mutate_at(vars(treatment_time,year), function(x) as.numeric(paste0(x))) %>% 
  mutate(max_treat = max(treatment_time, na.rm=TRUE)) %>% 
  # DROP ALL OBSERVATIONS THAT AREN'T iDENTIFIED
  filter(year < max_treat) %>% 
  mutate(year_lt_treatment_time = as.integer(year < treatment_time)) %>% 
  mutate(year_tmp = case_when(year >= treatment_time ~ year)) %>% 
  #mutate(year_tmp = case_when(year >= treatment_time & year < max(treatment_time,na.rm=TRUE) ~ year)) %>%  THIS IS THE PROBLEMATIC LINE
  mutate(treatment_time_tmp = case_when(year >= treatment_time ~ treatment_time)) %>% 
  mutate(treatment_time = ifelse(is.na(treatment_time),0,treatment_time)) %>% 
  mutate(treatment_time = factor(treatment_time),
         year = factor(year)) %>% 
  mutate(treatment_time_tmp = factor(treatment_time_tmp),
         year_tmp = factor(year_tmp)) %>%   
  mutate(i = interaction(treat,treatment_time_tmp,year_tmp,sep=":")) %>% 
  mutate(i = paste0(i)) %>% 
  dummy_cols("i") %>%
  janitor::clean_names() 
  
```

#### All Groups Eventually Treated

Using group fixed effects.

```{r}
#| warning: false
#| message: false

#1a  jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time)  group
fmla1a <- as.formula(glue("dep_var ~ {paste0(grep('i_1_',colnames(df_etwfe6),value=TRUE),collapse = '+')} | treatment_time + year"))
fmla1a
fit1a <- feols(fmla1a,df_etwfe6); fit1a

est1a <- 
  tidy(fit1a) %>% 
  separate(term, into =c("tmp","tmp2","group","year"))  %>% 
  mutate(att = estimate) %>% 
  select(group, year , att) %>% 
  mutate(estimator = "ETWFE - Group FE") %>% 
  mutate_at(vars(group,year), as.numeric)
    
stata("jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time)  group", data.in = data6 %>% mutate_at(vars(year,treatment_time),function(x) as.numeric(paste0(x))))

est1a %>% kable()


```

Using unit fixed effects -- this one runs into p

```{r}
#| warning: false
#| message: false
#2b jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time) 
fmla1b <- as.formula(glue("dep_var ~ {paste0(grep('i_1_',colnames(df_etwfe6),value=TRUE),collapse = '+')} | unit + year"))
fit1b <- feols(fmla1b,df_etwfe6)

est1b <- 
  tidy(fit1b) %>% 
  separate(term, into =c("tmp","tmp2","group","year"))  %>% 
  mutate(att = estimate) %>% 
  select(group, year , att) %>% 
  mutate(estimator = "ETWFE - Unit FE") %>% 
  mutate_at(vars(group,year), as.numeric)
```

#### Only Use a Never Treated Group as Control

```{r}
#| warning: false
#| message: false

df_etwfe6b <- 
  data6b %>% 
  mutate_at(vars(treatment_time,year), function(x) as.numeric(paste0(x))) %>% 
  
  group_by(treatment_time) %>% 
  arrange(treatment_time,year) %>% 
  mutate(first_year = as.integer(row_number()==1)) %>% 
  
  mutate(treatment_time = ifelse(is.na(treatment_time),0,treatment_time)) %>% 
  
  mutate(year_tmp = case_when(year >= treatment_time  ~ year)) %>% 
  mutate(treatment_time_tmp = case_when(year >= treatment_time~ treatment_time)) %>% 
  
 
  mutate(treatment_time = factor(treatment_time),
         year = factor(year)) %>% 
  
  mutate(treatment_time_tmp = factor(treatment_time_tmp),
         year_tmp = factor(year_tmp)) %>%   
  mutate(i = interaction(treat,treatment_time_tmp,year_tmp,sep=":")) %>% 
  mutate(i = paste0(i)) %>% 
  dummy_cols("i") %>%
  janitor::clean_names() %>% 
  select(-i_na)



# This data frame is structured to only use never-treated groups as controls. 
df_etwfe6b_nt <- 
  data6b %>% 
  mutate_at(vars(treatment_time,year), function(x) as.numeric(paste0(x))) %>% 
  
  mutate(treat = 1) %>% 
  
  mutate(treatment_time = ifelse(is.na(treatment_time),0,treatment_time)) %>% 
  
  group_by(treatment_time) %>% 
  mutate(first_year = as.integer(year == min(year,na.rm=TRUE))) %>% 
  ungroup()  %>% 
  # mutate(year_tmp = year,
         # treatment_time_tmp = treatment_time) %>% 
  mutate(year_tmp = case_when(first_year!=1  ~ year)) %>% 

  mutate(treatment_time_tmp = case_when( first_year != 1~ treatment_time)) %>% 
    

  mutate(treatment_time_tmp = factor(treatment_time_tmp),
         year_tmp = factor(year_tmp)) %>%   
  
    
  mutate(treatment_time = factor(treatment_time),
         year = factor(year)) %>% 
  
  
  mutate(i = interaction(treat,treatment_time_tmp,year_tmp,sep=":")) %>% 
  mutate(i = paste0(i)) %>% 
  dummy_cols("i") %>%
  janitor::clean_names() %>% 
  select(-contains("i_1_0_"))


#2a  jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time)  group
fmla2a <- as.formula(glue("dep_var ~ {paste0(grep('i_1_',colnames(df_etwfe6b),value=TRUE),collapse = '+')} | treatment_time + year"))
fmla2a
fit2a <- feols(fmla2a,df_etwfe6b)
est2a <- 
  tidy(fit2a) %>% 
  separate(term, into =c("tmp","tmp2","group","year"))  %>% 
  mutate(att = estimate) %>% 
  select(group, year , att) %>% 
  mutate(estimator = "ETWFE - Group FE") %>% 
  mutate_at(vars(group,year), as.numeric)

#2b  jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time)  
fmla2b <- as.formula(glue("dep_var ~ {paste0(grep('i_1_',colnames(df_etwfe6b),value=TRUE),collapse = '+')} | unit + year"))
fmla2b
fit2b <- feols(fmla2b,df_etwfe6b)
est2b <- 
  tidy(fit2b) %>% 
  separate(term, into =c("tmp","tmp2","group","year"))  %>% 
  mutate(att = estimate) %>% 
  select(group, year , att) %>% 
  mutate(estimator = "ETWFE - Unit FE") %>% 
  mutate_at(vars(group,year), as.numeric)#2b  jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time)  
fmla2b <- as.formula(glue("dep_var ~ {paste0(grep('i_1_',colnames(df_etwfe6b),value=TRUE),collapse = '+')} | unit + year"))
fmla2b
fit2b <- feols(fmla2b,df_etwfe6b)
est2b <- 
  tidy(fit2b) %>% 
  separate(term, into =c("tmp","tmp2","group","year"))  %>% 
  mutate(att = estimate) %>% 
  select(group, year , att) %>% 
  mutate(estimator = "ETWFE - Unit FE") %>% 
  mutate_at(vars(group,year), as.numeric)




## NEED TO GET RID OF ONE MORE CATEGORY (1998 x 1980)
#2c  jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time) group never
fmla2c <- as.formula(glue("dep_var ~ {paste0(grep('i_1_',colnames(df_etwfe6b_nt),value=TRUE),collapse = '+')} | treatment_time + year"))
fit2c <- feols(fmla2c,df_etwfe6b_nt)
est2c <- 
  tidy(fit2c) %>% 
  separate(term, into =c("tmp","tmp2","group","year"))  %>% 
  mutate(att = estimate) %>% 
  select(group, year , att) %>% 
  mutate(estimator = "ETWFE - NT Cx - Group FE") %>% 
  mutate_at(vars(group,year), as.numeric); est2c

#2d jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time) never !!!! THIS ONE SEEMS TO BE WRONG IN STATA ... 
fmla2d <- as.formula(glue("dep_var ~ {paste0(grep('i_1_',colnames(df_etwfe6b_nt),value=TRUE),collapse = '+')} | unit + year"))
fit2d <- feols(fmla2d,df_etwfe6b_nt %>% mutate(unit = factor(unit)))
est2d <- 
  tidy(fit2d) %>% 
  separate(term, into =c("tmp","tmp2","group","year"))  %>% 
  mutate(att = estimate) %>% 
  select(group, year , att) %>% 
  mutate(estimator = "ETWFE - NT Cx - Unit FE") %>% 
  mutate_at(vars(group,year), as.numeric); est2d



stata("
      replace treatment_time = 0 if treatment_time==.
      jwdid  dep_var , ivar(unit) tvar(year) gvar(treatment_time) never
      ", data.in = data6b %>% mutate_at(vars(year,treatment_time),function(x) as.numeric(paste0(x))))
```

## Estimate CS

```{r}
data6_cs <- 
  data6 %>% 
  mutate(year = as.numeric(paste0(year)),
         treatment_time = as.numeric(paste0(treatment_time)))  %>% 
  mutate(treatment_time = ifelse(is.na(treatment_time),0,treatment_time))
  

fit_cs6 <- att_gt(yname = "dep_var",
                        tname = "year",
                        idname = "unit",
                        gname = "treatment_time",
                        control_group = "notyettreated",
                        data = data6_cs
                        )

est_cs6 <-  tibble(group = fit_cs6$group, year = fit_cs6$t, att = fit_cs6$att) %>% 
  mutate(estimator = "CS") 
         

```

```{r}
data6b_cs <- 
  data6b %>% 
  mutate(year = as.numeric(paste0(year)),
         treatment_time = as.numeric(paste0(treatment_time)))  %>% 
  mutate(treatment_time = ifelse(is.na(treatment_time),0,treatment_time))
  

fit_cs6b <- att_gt(yname = "dep_var",
                        tname = "year",
                        idname = "unit",
                        gname = "treatment_time",
                        control_group = "nevertreated",
                        data = data6b_cs
                        )

est_cs6b <-  tibble(group = fit_cs6b$group, year = fit_cs6b$t, att = fit_cs6b$att) %>% 
  mutate(estimator = "CS")
```

## Compare

```{r}
est1a %>% 
  bind_rows(est1b) %>% 
  bind_rows(est_cs6) %>% 
  ggplot(aes(x = year, y = att, colour = factor(group), pch = estimator)) + 
  geom_point() +
  #ggthemes::theme_clean() +
  ggsci::scale_color_aaas() 

est2a %>% 
  bind_rows(est2b) %>% 
  bind_rows(est2c) %>% 
  bind_rows(est2d) %>% 
  bind_rows(est_cs6b) %>% 
  ggplot(aes(x = year, y = att, colour = factor(group), pch = estimator)) + 
  geom_point() +
  #theme_clean() +
  ggsci::scale_color_aaas() +
  #scale_shape_manual(values =c(19,4,3)) +
  facet_grid(~group)
```

[Source](https://friosavila.github.io/playingwithstata/main_jwdid.html)

[Review paper](https://jonathandroth.github.io/assets/files/DiD_Review_Paper.pdf)

[Wooldridge](https://twitter.com/jmwooldridge/status/1374555518623178757?lang=en)
