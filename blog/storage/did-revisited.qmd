---
title: "Simulate DID Data"
editor: visual
editor_options: 
  chunk_output_type: console
freeze: true
---

```{r}
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(directlabels)
library(ggthemes)
library(fastDummies)
# library(lfe)
library(did)
library(glue)
library(furrr)
library(patchwork)
library(progressr)
library(repr)
library(DT)
library(knitr)
library(gt)
library(here)
library(ggsci)
library(fixest)
library(RStata)
library(broom)
library(lme4)
library(fixest)

options("RStata.StataPath" = "/Applications/Stata/StataSE.app/Contents/MacOS/stata-se")
options("RStata.StataVersion" = 16)
    
options(dplyr.summarise.inform = FALSE)

theme_tufte_grid <- function(base_size = 16, base_family = "Gill Sans", ticks = TRUE) {
  
  ret <- ggplot2::theme_bw(base_family = base_family, base_size = base_size) +
    ggplot2::theme(
      axis.line = ggplot2::element_blank(),
      axis.ticks = ggplot2::element_blank(),
      axis.title.x = ggplot2::element_text(vjust = -0.3),
      axis.title.y = ggplot2::element_text(vjust = 0.8),
      legend.background = ggplot2::element_blank(),
      legend.key = ggplot2::element_blank(),
      legend.title = ggplot2::element_text(face="plain"),
      panel.background = ggplot2::element_blank(),
      panel.border = ggplot2::element_blank(),
      panel.grid = ggplot2::element_blank(),
      plot.background = ggplot2::element_blank(),
      strip.background = ggplot2::element_blank()
    )
  
  if (!ticks) {
    ret <- ret + ggplot2::theme(axis.ticks = ggplot2::element_blank())
  }
  
  ret
}
invthm <- theme_minimal() + 
  theme(
    panel.background = element_rect(fill = "transparent", colour = NA), 
    plot.background = element_rect(fill = "transparent", colour = NA),
    legend.background = element_rect(fill = "transparent", colour = NA),
    legend.key = element_rect(fill = "transparent", colour = NA),
    text = element_text(colour = "black"),
    axis.text = element_text(colour = "black"),
    legend.position = 'none',
    legend.title = element_blank(),
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360)
  )
```

```{r}
#| echo: false
#| message: false
#| warning: false


params_2x2 <- list(
  mu = list("1998" = 2),
  mu_t = list("1998" = 0),
  tx = list("1998" = 1:25,
            "NA" = 26:50),
  bin = c(-5,5)
)


params_4x4 =  list(
  mu = list("1989" = 5,
            "1990" = 3,
            "1991" = 1),
  mu_t = list("1989" = 0,
              "1990" = 0,
              "1991" = 0),
  tx = list("1989" = 1:17,
            "1990" = 18:35,
            "1991" = 36:50),
  bin = c(-5,5))


# Case 1:  One Treatment Period, Constant Treatment Effects

params1 <- list(
  mu = list("1998" = 2),
  mu_t = list("1998" = 0),
  tx = list("1998" = 1:25,
            "NA" = 26:50),
  bin = c(-5,5)
)

# Case 2: One Treatment Period, Dynamic Treatment Effects
params2=  list(
  mu = list("1998" = 0),
  mu_t = list("1998" = 0.3),
  tx = list("1998" = 1:25,
            "NA" = 26:50),
  bin = c(-5,5))

# Case 3: Multiple Treatment Periods and Constant Equal Treatment Effects
params3=  list(
  mu = list("1989" = 3,
            "1998" = 3,
            "2007" = 3),
  mu_t = list("1989" = 0,
              "1998" = 0,
              "2007" = 0),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "2007" = 36:50),
  bin = c(-5,5))


# Case 4: Multiple Treatment Periods and Constant Different Treatment Effects

params4 =  list(
  mu = list("1989" = 5,
            "1998" = 3,
            "2007" = 1),
  mu_t = list("1989" = 0,
              "1998" = 0,
              "2007" = 0),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "2007" = 36:50),
  bin = c(-5,5))

params4b =  list(
  mu = list("1989" = 5,
            "1998" = 3),
  mu_t = list("1989" = 0,
              "1998" = 0),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "NA" = 36:50),
  bin = c(-5,5))

# Case 5: Multiple Treatment Periods and Constant Dynamic Treatment Effects
# Same as Sant'Anna Case 1 (all units being eventually treated and homogeneous treatment effect dynamics)
params5=  list(
  mu = list("1989" = 0,
            "1998" = 0,
            "2007" = 0),
  mu_t = list("1989" = 0.3,
              "1998" = 0.3,
              "2007" = 0.3),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "2007" = 36:50),
  bin = c(-5,5))

# Sant'Anna Case 2: One group never treated
params5b=  list(
  mu = list("1989" = 0,
            "1998" = 0),
  mu_t = list("1989" = 0.3,
              "1998" = 0.3),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "NA" = 36:50),
  bin = c(-5,5))

# Sant'Anna Case 2: One group never treated, but use all leads and lags
params5c=  list(
  mu = list("1989" = 0,
            "1998" = 0),
  mu_t = list("1989" = 0.3,
              "1998" = 0.3),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "NA" = 36:50),
  bin = c(-100,100))


# Case 6: Multiple Treatment Periods and Heterogeneous Dynamic Treatment Effects


params_w =  list(
  mu = list("2014" = 0,
            "2015" = 0,
            "2016" = 0),
  mu_t = list("2014" = 0.5,
              "2015" = 0.3,
              "2016" = 0.1),
  tx = list("2014" = 10:17,
            "2015" = 18:35,
            "2016" = 36:50),
  bin = c(-5,5))


params6=  list(
  mu = list("1989" = 0,
            "1998" = 0,
            "2007" = 0),
  mu_t = list("1989" = 0.5,
              "1998" = 0.3,
              "2007" = 0.1),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "2007" = 36:50),
  bin = c(-5,5))


params6b=  list(
  mu = list("1989" = 0,
            "1998" = 0),
  mu_t = list("1989" = 0.5,
              "1998" = 0.3),
  tx = list("1989" = 1:17,
            "1998" = 18:35,
            "NA" = 36:50),
  bin = c(-5,5))
``` 

```{r, echo = FALSE}
# params = params6 
# N = 1000
# start = 1980
# stop = 2015

make_data <- function(params, N = 1000, start = 1980, stop = 2015) {
  mu <- params$mu
  mu_t <- params$mu_t
  tx = params$tx
  bin <- params$bin

  # year fixed effects
  year <- tibble(
    year = start:stop,
    year_fe = rnorm(length(start:stop), 0, 0.5))

  df_truth_ <-suppressWarnings({
    map(tx,~(.x %>% data.frame())) %>%
      bind_rows(.id = "tx") %>%
      set_names(c("group","state")) %>%
      as_tibble() %>%
      suppressMessages(mutate(group = as.numeric(paste0(group)))) %>%
      left_join(
        map(mu,~(.x %>% data.frame())) %>%
          bind_rows(.id = "tx") %>%
          set_names(c("group","mu")) %>%
          inner_join(
            map(mu_t,~(.x %>% data.frame())) %>%
              bind_rows(.id = "tx") %>%
              set_names(c("group","mu_t")),"group"
          ), c("group")
      ) %>%
      mutate(group = ifelse(!is.na(group),as.numeric(paste0(group)),NA))
  })

  # For dynamic treatment effects
  df_truth_t <-
    crossing(state = unique(df_truth_$state), year = unique(year$year)) %>%
    left_join(df_truth_,"state") %>%
    mutate(rel_time = pmax(year-group)) %>%
    mutate(tau = ifelse(!is.na(mu) & rel_time>=0,mu,0),
           tau_t = ifelse(!is.na(mu_t) &rel_time>=0,mu_t,0)) %>%
    group_by(group, state) %>%
    mutate(cumtau = tau + cumsum(tau_t))   %>%
    group_by(rel_time) %>%
    summarise(mu_truth = mean(cumtau)) %>% na.omit()



  df_truth <-
    crossing(state = unique(df_truth_$state), year = unique(year$year)) %>%
    left_join(df_truth_,"state") %>%
    mutate(rel_time = pmax(year-group)) %>%
    mutate(tau = ifelse(!is.na(mu) & rel_time>=0,mu,0),
           tau_t = ifelse(!is.na(mu_t) &rel_time>=0,mu_t,0)) %>%
    group_by(group, state) %>%
    mutate(cumtau = tau + cumsum(tau_t)) %>%
    mutate(max_time_post = max(year-group)) %>%
    ungroup() %>%
    mutate(max_time_post = min(max_time_post,na.rm=TRUE)) %>%
    #filter(rel_time <= max_time_post) %>%
    filter(cumtau>0) %>% group_by(group) %>% summarise(mean = mean(cumtau)) %>%
    as_tibble() %>%
    left_join(
      tx %>% map_dbl(~(length(.x))) %>% data.frame() %>% rownames_to_column(var = "group") %>% set_names(c("group","weight")) %>%
        filter(group != "NA") %>%
        mutate(total_weight = sum(weight)) %>%
        mutate(group = as.numeric(paste0(group))),
      "group") %>%
    mutate(mu_truth = mean*weight/total_weight) %>%
    summarise(mu_truth = sum(mu_truth)) %>%
    mutate(rel_time = NA) %>%
    mutate(type = "Static")  %>%
    bind_rows(
      df_truth_t %>%
        mutate(type = "Dynamic")
    )

  # Units
  unit <- 
    tibble(
    unit = 1:N,
    unit_fe = rnorm(N, 0, 0.5),
    # generate state
    state = sample(rep(1:50, N/50), N, replace = FALSE)) %>%
    left_join(
      df_truth_,c("state")
    ) %>%
        ungroup() %>% 
    mutate(evertreated = ifelse(is.na(as.numeric(group)),"C","T")) %>%
    mutate(hat_gamma = mu) %>%
    mutate(hat_gamma_t = mu_t) %>%
    # generate unit specific yearly treatment effects
    rowwise() %>%
    mutate(gamma = rnorm(1, hat_gamma, .2)) %>%
    mutate(gamma_t = ifelse(mu_t!=0,rnorm(1,hat_gamma_t,0.2),0))


  # full interaction of unit X year
  df <- crossing(unit, year) %>%
    # make error term and get treatment indicators and treatment effects
    mutate(error = rnorm(nrow(.), 0, 0.5),
           treat = ifelse(year >= group & !is.na(group), 1, 0),
           tau = ifelse(treat == 1, gamma, 0),
           tau_t = ifelse(treat==1,gamma_t,0)) %>%
    # calculate the dep variable
    group_by(unit) %>%
    mutate(cumtau = tau + cumsum(tau_t)) %>%
    mutate(dep_var = unit_fe + year_fe + cumtau + error) %>%
    mutate(rel_year = year - as.numeric(group)) %>%
    mutate(rel_year = ifelse(rel_year == -Inf, NA, rel_year))%>%
    dummy_cols(select_columns = "rel_year") %>%
    mutate(across(starts_with("rel_year_"), ~replace_na(., 0))) %>%
    # generate pre and post dummies
    mutate(Pre = ifelse((rel_year < bin[1]) * (!is.na(rel_year)), 1, 0),
           Post = ifelse((rel_year > bin[2]) * (!is.na(rel_year)), 1, 0)) %>%
    mutate(bin1 = bin[1],
           bin2 = bin[2])

  out <- list(
    df = df,
    truth =   df_truth,
    truth_g = df_truth_,
    params = params
  )
}
plot_data <- function(df) {

  year_range <- range(df$df$year)
  
  staggered <- ifelse(length(unique(na.omit(df$df$group)))>1,"Staggered","Single Treatment Time")

  control <- ifelse("C" %in% unique(df$df$evertreated),TRUE,FALSE)

  if (control) {
    df_ <- df$df %>%
      mutate(group = ifelse(evertreated=="C","Never Treated",paste0(group)))
  } else {
    df_ <- df$df
  }
  unique_groups <- unique(df_$group)
  colors <- c("#A7473A","#4B5F6C","#51806a")[1:length(unique_groups)]
  names(colors) = unique(df_$group)

  df_vline <- suppressWarnings({
    data.frame(group = unique(df_$group),xintercept = unique(as.numeric(df_$group)) - 0.5) %>%
      mutate(color = colors[factor(group)])
  })

  suppressWarnings({
    df_ %>%
      ggplot(aes(x = year, y = dep_var)) +
      # unit specific lines
      geom_line(alpha = 1/10, color = "grey",aes(group = unit)) +
      # group specific averages
      geom_line(
        data = . %>%
          group_by(group, year) %>%
          summarize(dep_var = mean(dep_var)) ,
        aes(x = year, y = dep_var, group = factor(group),
            color = factor(group)), size = 1) +
      labs(x = "", y = "", color = "Group") +
      geom_vline(data = df_vline, aes(xintercept = xintercept, color = factor(group)),linetype="dashed",size=1) +
      ggsci::scale_color_aaas()+
      geom_dl(data =
                . %>%
                group_by(group, year) %>%
                summarize(dep_var = mean(dep_var)), method = "last.bumpup",aes(label = group)) +
      scale_y_continuous(limits = c(-3, 20)) +
      #labs(subtitle = expression(paste("Staggered + Dynamic/Unequal ", tau))) +
      theme_clean() + theme(plot.background = element_blank()) +
      theme(legend.position = 'none',
            legend.title = element_blank(),
            plot.title = element_text(hjust = 0.5),
            plot.subtitle = element_text(hjust = 0.5),
            axis.title.y = element_text(hjust = 0.5, vjust = 0.5, angle = 360))+
      scale_x_continuous(limits = year_range)
  })
}
plot_tx_grid <- function(df) {
  df <- df$df
  year_range <- range(df$year)
  tvals <- unique(df$year)
  gvals <- unique(df$group)
  
  crossing(gvals,tvals)  %>% 
    mutate(treated = tvals>=gvals) %>% 
    spread(gvals,treated) %>% 
    janitor::clean_names() %>% 
    rename_at(vars(matches("na")), ~sub("na","nt",.)) %>% 
    gather(group,value,-tvals) %>% 
    ggplot() +
    geom_tile(aes(y=tvals,x=group, fill = value), colour = "black", size = 2) + 
    theme_tufte_grid() + 
    ggsci::scale_fill_aaas() +
    theme(legend.position="none") +
    scale_y_reverse() +
    labs(y = "Time" , x = "Group") +
    scale_x_discrete(position = "top") +
    theme(axis.text=element_text(size=12),
          axis.title=element_text(size=14,face="bold"))  + 
    scale_y_continuous(breaks = seq(year_range[1],year_range[2],1))
}
```

## Plot Data

```{r}
#| echo: false
#| warning: false
#| message: false
#| 
set.seed(12345)

df_w <- make_data(params_w,N=1000, start = 2011, stop = 2016) 
data_w <- df_w$df %>% 
  select(y = dep_var,treatment_time = group, c = state, id = unit, year, w = treat) 
haven::write_dta(data_w, path = "~/Desktop/data_w.dta")

df1 <- make_data(params1,N=1000) 
data1 <- df1$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor)

df3 <- make_data(params3,N=1000) 
data3 <- df3$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor)


df4 <- make_data(params4,N=1000) 
data4 <- df4$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor)
haven::write_dta(data4 %>% mutate_at(vars(treatment_time,year),function(x) as.numeric(paste0(x))), path = "~/Desktop/data4.dta")

df4b <- make_data(params4b,N=1000) 
data4b <- df4b$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor) %>% 
  mutate(treated =1)
haven::write_dta(data4b %>% mutate_at(vars(treatment_time,year),function(x) as.numeric(paste0(x))), path = "~/Desktop/data4b.dta")



df5 <- make_data(params5,N=1000) 
data5 <- df5$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor)
haven::write_dta(data5 %>% mutate_at(vars(treatment_time,year),function(x) as.numeric(paste0(x))), path = "~/Desktop/data5.dta")

df5b <- make_data(params5b,N=1000) 
data5b <- df5b$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor) %>% 
  mutate(treated =1)
haven::write_dta(data5b %>% mutate_at(vars(treatment_time,year),function(x) as.numeric(paste0(x))), path = "~/Desktop/data5b.dta")



df6 <- make_data(params6,N=1000) 
data6 <- df6$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor)
haven::write_dta(data6 %>% mutate_at(vars(treatment_time,year),function(x) as.numeric(paste0(x))), path = "~/Desktop/data6.dta")

df6b <- make_data(params6b,N=1000) 
data6b <- df6b$df %>% 
  select(dep_var,treatment_time = group, state,unit, year, treat) %>% 
  mutate_at(vars(treatment_time, year), factor) %>% 
  mutate(treated =1)
haven::write_dta(data6b %>% mutate_at(vars(treatment_time,year),function(x) as.numeric(paste0(x))), path = "~/Desktop/data6b.dta")


df6 %>%  plot_data() + ylim(c(-2,6)) + scale_x_continuous(expand = expand_scale(mult = c(0,.25)))

df6b %>%  plot_data() + ylim(c(-2,6)) + scale_x_continuous(expand = expand_scale(mult = c(0,.25)))

```




[Source](https://friosavila.github.io/playingwithstata/main_jwdid.html)

[Review paper](https://jonathandroth.github.io/assets/files/DiD_Review_Paper.pdf)

[Wooldridge](https://twitter.com/jmwooldridge/status/1374555518623178757?lang=en)
